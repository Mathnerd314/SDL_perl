=pod

=head1 NAME

SDL::Cursor - a SDL perl extension

=head1 SYNOPSIS

  $cursor = SDL::Cursor->new(
	-data => new SDL::Surface "cursor.png",
	-mask => new SDL::Surface "mask.png",
	-x    => 0, -y => 0 );
  $cusor->use;

=head1 DESCRIPTION

the SDL::Cursor module handles mouse cursors, and provide the developer to
use custom made cursors. Note that the cursors can only be in black and
white.

=head1 METHODS

=head2 new( -data => $surface_data, -mask => $surface_mask, x => $x, y => $y)

Creates a new cursor. The <C>-data</C> and <C>-mask</C> parameters should be both black and white pictures. The height and width of these surfaces should be a multiple of 8. The <C>-x</C> and <C>-y</C> are the coordinates of the cursor 'hot spot'.

=head2 warp(cursor,x, y)

Set the position of the SDL::Cursor given as first parameter .
the new postion is set to <C>x</C>, <C>y</C> coordinates in the application window.
SDL::warp trigger a new mouse motion event.
It doesn't returns anything.

=head2 use(cursor)

Set the SDL::Cursor given as first parameter to the active cursor.

=head2 get()

When used statically <C>SDL::Cursor::get()</C>, it will return the instance of the current cursor in use. Called as a method, it will return itself.

This method can be useful if you are dealing with several cursors.

=head2 show($toggle)

Set the visibility of the cursor. A false value will make the cursor
invisible in the Application window. A true value will show it back.

=head1 AUTHOR

David J. Goehrig

=head1 SEE ALSO

L<perl> L<SDL::Surface>

=cut	
